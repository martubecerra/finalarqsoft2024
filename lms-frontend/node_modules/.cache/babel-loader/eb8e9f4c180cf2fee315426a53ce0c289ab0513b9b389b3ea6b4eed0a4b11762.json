{"ast":null,"code":"const addComment = async (courseId, commentData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/courses/${courseId}/comments`, commentData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding comment:', error);\n    throw error;\n  }\n};\nconst getComments = async (courseId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/courses/${courseId}/comments`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\nconst uploadFile = async (courseId, file, token) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axios.post(`${API_URL}/courses/${courseId}/files`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n};\nconst getFiles = async (courseId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/courses/${courseId}/files`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching files:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["addComment","courseId","commentData","token","response","axios","post","API_URL","headers","Authorization","data","error","console","getComments","get","uploadFile","file","formData","FormData","append","getFiles"],"sources":["C:/Users/martu/OneDrive/Documentos/UCC tercero/Arquitectura de software I/LISTOS/trabajofinal-arqsoft1-2024 - final/lms-frontend/src/components/CourseDetail.js"],"sourcesContent":["const addComment = async (courseId, commentData, token) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/courses/${courseId}/comments`, commentData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding comment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getComments = async (courseId, token) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/courses/${courseId}/comments`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching comments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst uploadFile = async (courseId, file, token) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const response = await axios.post(`${API_URL}/courses/${courseId}/files`, formData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getFiles = async (courseId, token) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/courses/${courseId}/files`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching files:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,WAAW,EAAEC,KAAK,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,GAAGC,OAAO,YAAYN,QAAQ,WAAW,EAAEC,WAAW,EAAE;MACxFM,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,WAAW,GAAG,MAAAA,CAAOZ,QAAQ,EAAEE,KAAK,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACS,GAAG,CAAC,GAAGP,OAAO,YAAYN,QAAQ,WAAW,EAAE;MAC1EO,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMI,UAAU,GAAG,MAAAA,CAAOd,QAAQ,EAAEe,IAAI,EAAEb,KAAK,KAAK;EAClD,IAAI;IACF,MAAMc,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,GAAGC,OAAO,YAAYN,QAAQ,QAAQ,EAAEgB,QAAQ,EAAE;MAClFT,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK,EAAE;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMS,QAAQ,GAAG,MAAAA,CAAOnB,QAAQ,EAAEE,KAAK,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACS,GAAG,CAAC,GAAGP,OAAO,YAAYN,QAAQ,QAAQ,EAAE;MACvEO,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}